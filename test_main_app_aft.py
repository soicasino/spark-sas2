#!/usr/bin/env python3\n\"\"\"\nTest AFT transfer using the main application's SAS service\n\"\"\"\n\nimport asyncio\nimport time\nimport sys\nimport os\n\n# Add the current directory to Python path\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n\nfrom sas_web_service import SASWebService\nfrom config_manager import ConfigManager\n\nasync def test_main_app_aft():\n    \"\"\"Test AFT transfer using the main application's SAS service\"\"\"\n    \n    print(\"=== Main Application AFT Test ===\")\n    \n    # Initialize the main SAS service\n    config = ConfigManager()\n    sas_service = SASWebService(config)\n    \n    print(\"Initializing SAS service...\")\n    if not await sas_service.initialize():\n        print(\"Failed to initialize SAS service\")\n        return False\n    \n    print(\"SAS service initialized successfully\")\n    \n    try:\n        # Test 1: Get current balance\n        print(\"\\n--- Test 1: Get Current Balance ---\")\n        balance_result = await sas_service.get_balance()\n        print(f\"Current balance: {balance_result}\")\n        \n        # Test 2: Perform AFT transfer\n        print(\"\\n--- Test 2: AFT Transfer (1 TL) ---\")\n        transfer_result = await sas_service.add_money(\n            amount=1.0,\n            transfer_type=10,  # Cashable\n            promo_amount=0.0\n        )\n        print(f\"Transfer result: {transfer_result}\")\n        \n        if transfer_result and 'transaction_id' in transfer_result:\n            transaction_id = transfer_result['transaction_id']\n            print(f\"Transaction ID: {transaction_id}\")\n            \n            # Wait for transfer completion\n            print(\"Waiting for transfer completion...\")\n            for i in range(20):  # Wait up to 10 seconds\n                await asyncio.sleep(0.5)\n                status = sas_service.sas_money.global_para_yukleme_transfer_status\n                print(f\"[{i*0.5:.1f}s] Transfer status: {status}\")\n                \n                if status == \"00\":\n                    print(\"✅ Transfer completed successfully!\")\n                    break\n                elif status in [\"84\", \"87\", \"81\"]:\n                    print(f\"❌ Transfer failed with status: {status}\")\n                    break\n            else:\n                print(\"⏰ Transfer timed out\")\n        \n        # Test 3: Get balance after transfer\n        print(\"\\n--- Test 3: Get Balance After Transfer ---\")\n        await asyncio.sleep(1)  # Wait a moment\n        final_balance = await sas_service.get_balance()\n        print(f\"Final balance: {final_balance}\")\n        \n        # Test 4: Get meters to see coin in/out changes\n        print(\"\\n--- Test 4: Get Meters ---\")\n        meters = await sas_service.get_meters()\n        if meters:\n            print(f\"Total coin in: {meters.get('total_coin_in', 'N/A')}\")\n            print(f\"Total coin out: {meters.get('total_coin_out', 'N/A')}\")\n            calculated_balance = meters.get('total_coin_in', 0) - meters.get('total_coin_out', 0)\n            print(f\"Calculated balance: {calculated_balance:.2f} TL\")\n        \n    except Exception as e:\n        print(f\"Error during test: {e}\")\n        import traceback\n        traceback.print_exc()\n    \n    finally:\n        # Cleanup\n        print(\"\\nCleaning up...\")\n        await sas_service.cleanup()\n        print(\"Test completed\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test_main_app_aft())\n 